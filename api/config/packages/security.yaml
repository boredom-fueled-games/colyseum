security:
    encoders:
        App\Core\Entity\User:
            algorithm: auto

    enable_authenticator_manager: true
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Core\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api_token_refresh:
            pattern: ^/auth/refresh
            stateless: true
        login:
            pattern: ^/auth/login
            stateless: true
            json_login:
                check_path: /auth/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/
            stateless: true
            jwt: ~
#        main:
#            lazy: true
#            provider: app_user_provider

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/auth/login, roles: IS_ANONYMOUS }
        - { path: ^/auth/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/users, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: POST }
        - { path: ^/docs, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/combat_logs, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: GET }
        #        - { path: ^/,       roles: IS_ANONYMOUS }
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }
